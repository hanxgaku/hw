(begin
    (define genv (quote ()))
    (define makelist (lambda (listexp alist)
        (if (null listexp)
            (quote ())
            (cons (eval (car listexp) alist) (makelist (cdr listexp) alist)))))
    (define apply (lambda (op applyexp)
        (cond
            ((= op (quote +)) (+ (car applyexp) (car (cdr applyexp))))
            ((= op (quote -)) (- (car applyexp) (car (cdr applyexp))))
            ((= op (quote /)) (/ (car applyexp) (car (cdr applyexp))))
            ((= op (quote *)) (* (car applyexp) (car (cdr applyexp))))
            ((= op (quote list)) applyexp)
            ((= op (quote car)) (car (car applyexp)))
            ((= op (quote cdr)) (cdr (car applyexp)))
            ((= op (quote cons)) (cons (car applyexp) (car (cdr applyexp))))
            ((closure? op) (op applyexp))
            )))
    (define pairlis (lambda (vars vals alist)
        (if (null vars)
            alist
            (cons (cons (car vars) (list (car vals))) (pairlis (cdr vars) (cdr vals) alist)))))
    (define assoc (lambda (var alist)
        (cond 
            ((null alist) (quote ()))
            ((= var (car (car alist))) (car alist))
            (t (assoc var (cdr alist))))))
    (define evallet (lambda (letvars letexp alist)
        (if (null letvars) 
            (eval letexp alist)
            (evallet (cdr letvars) letexp (cons 
                                                (list 
                                                    (car (car letvars))
                                                    (eval (car (cdr (car letvars))) alist))
                                                alist)))))
    (define evalcond (lambda (condexp alist)
        (if (eval (car (car condexp)) alist)
            (eval (car (cdr (car condexp))) alist)
            (evalcond (cdr condexp) alist))))
    (define eval
        (lambda (evalexp alist) 
            (cond
                ((string? evalexp) 
                    (let ((varl (assoc evalexp alist)))
                        (if (null varl) 
                            (let ((varg (assoc evalexp genv))) 
                                (if (null varg)
                                    evalexp
                                    (car (cdr varg))))
                            (car (cdr varl)))))
                ((number? evalexp) evalexp)
                ((= (car evalexp) (quote quote)) (car (cdr evalexp)))
                ((= (car evalexp) (quote cond)) (evalcond (car (cdr evalexp)) alist))
                ((= (car evalexp) (quote let)) (evallet (car (cdr evalexp)) (car (cdr (cdr evalexp))) alist))
                ((= (car evalexp) (quote lambda)) 
                    (lambda (args) 
                        (eval (car (cdr (cdr evalexp))) (pairlis (car (cdr evalexp)) args alist))))
                ((= (car evalexp) (quote define))
                    (setq genv (cons (cons (car (cdr evalexp)) (list (eval (car (cdr (cdr evalexp))) alist))) genv)))
                (t (apply (eval (car evalexp) alist) (makelist (cdr evalexp) alist)))
                )))
    ;(let ((x 42)) (begin (setq x (+ 1 x)) x))
    ;(eval (quote ((lambda (x y) (+ x y)) 1 2)) (quote ())))
    ;(eval (quote (lambda (x) (+ 1 x))) (quote ()))
    ;((lambda (x y) (+ x y)) 1 2)
    ;(eval (quote ((lambda (x y) (+ x y)) 1 2)) (quote ())))
    ;(eval (quote (car (quote (1 2 3)))) (quote ()))
    ;(= (quote quote) (quote quote))
    (define len (lambda (x) (if (null x) 0 (+ 1 (len (cdr x))))))
    ;(eval (quote (+ 1 2)) (quote ()))
    ;(car (quote (+ 1 2)))
    (len (quote (a b c d))))
    ;(eval (quote (let ((x 1) (y 2)) (+ x y))) (quote ())))
    ;(eval (quote (let ((y (quote ()))) y)) (quote ())))